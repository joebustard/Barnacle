 // Version 1.0
 // standard definitions
 Struct Vertex
 {
   double x;
   double y;
   double z;
 }

 // size
 Struct Size
 {
   double length;
   double height;
   double width;
 }

 Struct Colour
 {
   Int a;
   Int r;
   Int g;
   int b;
 }

 Colour Black;
 Colour White;
 Colour Red;
 Colour Blue;
 Colour Yellow;
 Colour Green;
 Colour Gray;
 Colour Brown;
 Colour Purple;

    Function Colour Argb( Int  a, Int  r, Int  g, Int  b ) 
    {
       Colour c ;
       c.a = a ;
       c.r = r ;
       c.g = g ;
       c.b = b ;
       Return c ;
   } 

 Function Vertex Zero()
 {
   Vertex v;
   v.X = 0.0;
   v.Y = 0.0;
   v.Z= 0.0;
 }

 procedure SetDefaultColours()
 {
   Red = Argb(255,255,0,0);
   Black = Argb(255,0,0,0);
   White = Argb(255,255,255,255);
   Blue = Argb(255,0,0,255);
   Green = Argb(255,0,255,0);
   Yellow = Argb(255,255,240,0);
   Gray = Argb(255,128,128,128);
   Brown = Argb(255,219,41,41);
   Purple = Argb(255,178,0,255);
 }

procedure ColourSolid(Solid sl, Colour cl)
{
  SetColour sl,cl.A,cl.R,cl.G,cl.B;
}

Function Size GetSolidSize( Solid sl)
{
    Size result;
    result.length = Length(sl);
    result.height = Height( sl);
    result.width = Width(sl);
    return result;
}

Function Solid CleanUnion( solid s1, solid s2)
{
   solid t = union(s1,s2);
   delete s1;
   delete s2;
   return t;
}

Function Solid CleanDifference( solid s1, solid s2)
{
   solid t = Difference(s1,s2);
   delete s1;
   delete s2;
   return t;
}

Function Solid CleanIntersection( solid s1, solid s2)
{
   solid t = Intersection(s1,s2);
   delete s1;
   delete s2;
   return t;
}

procedure floormove( solid sl, double px, double pz)
{
    move sl,px,0,pz;
    floor sl;
}

function solid HollowVertical( solid sl, double skinThickness)
{
    if ( skinThickness <= 0)
	{
		print "HollowVertical : invalid skinTickness value ",skinThickness;
		exit;
	}
	else
	{
		// make a cutter and position it to match the solid
		solid cutter = copy(sl);
		stackabove sl,cutter;
		alignbottom sl,cutter;

		// shrink it by the skin thickness
		double nl = length(sl) - (2 * skinthickness);
		double nh = height(sl) *2;
		double nw = width(sl) - (2 * skinthickness);
		double dy = nh *0.25;
		resize cutter,nl,nh,nw;

		//move to ensure a good overlap
		rmove cutter,0,-dy,0;

		// add cut
		sl = cleandifference(sl,cutter);
	}
	return sl;
}

function solid ClipLeft( solid sl, double l)
{
	if ( l <= 0 )
	{
		print "ClipLeft : invalid overlap value ",l;
		exit;
	}
	else
	{
		solid cutter =Make("box",0,0,0,5000,5000,5000);
		stackleft sl,cutter;
		rmove cutter, l-0.1,0,0;
		sl = cleandifference(sl,cutter);
	}
	return sl;
}

 procedure InitialiseLimpLib()
 {
   SetDefaultColours();
 }

 // Initialise the library
 // This will run automatically when the application is run
 InitialiseLimpLib();

